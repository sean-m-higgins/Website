/* eslint-disable no-console */
/* global process */
import domObjects from '@interactjs/utils/domObjects';
import { parentNode } from '@interactjs/utils/domUtils';
import * as is from '@interactjs/utils/is';
import win from '@interactjs/utils/window';
export const links = {
    touchAction: 'https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action',
    boxSizing: 'https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing',
};
export const install = process.env.NODE_ENV === 'production'
    ? () => { }
    // eslint-disable-next-line no-restricted-syntax
    : function install(scope, { logger } = {}) {
        logger = logger || console;
        if (process.env.NODE_ENV !== 'production') {
            scope.logger = logger;
            scope.interactions.signals.on('action-start', ({ interaction }) => {
                touchAction(interaction, scope.logger);
                boxSizing(interaction, scope.logger);
                noListeners(interaction, scope.logger);
            });
        }
    };
export const touchActionMessage = '[interact.js] Consider adding CSS "touch-action: none" to this element\n';
export const boxSizingMessage = '[interact.js] Consider adding CSS "box-sizing: border-box" to this resizable element';
export const noListenersMessage = '[interact.js] There are no listeners set for this action';
export function touchAction({ element }, logger) {
    if (!parentHasStyle(element, 'touchAction', /pan-|pinch|none/)) {
        logger.warn(touchActionMessage, element, links.touchAction);
    }
}
export function boxSizing(interaction, logger) {
    const { element } = interaction;
    if (interaction.prepared.name === 'resize' &&
        element instanceof domObjects.HTMLElement &&
        !hasStyle(element, 'boxSizing', /border-box/)) {
        logger.warn(boxSizingMessage, element, links.boxSizing);
    }
}
export function noListeners(interaction, logger) {
    const actionName = interaction.prepared.name;
    const moveListeners = interaction.interactable.events.types[`${actionName}move`] || [];
    if (!moveListeners.length) {
        logger.warn(noListenersMessage, actionName, interaction.interactable);
    }
}
function hasStyle(element, prop, styleRe) {
    return styleRe.test(element.style[prop] || win.window.getComputedStyle(element)[prop]);
}
function parentHasStyle(element, prop, styleRe) {
    let parent = element;
    while (is.element(parent)) {
        if (hasStyle(parent, prop, styleRe)) {
            return true;
        }
        parent = parentNode(parent);
    }
    return false;
}
export default {
    id: 'dev-tools',
    install,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0I7QUFDL0Isb0JBQW9CO0FBQ3BCLE9BQU8sVUFBVSxNQUFNLDhCQUE4QixDQUFBO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUN2RCxPQUFPLEtBQUssRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQzFDLE9BQU8sR0FBRyxNQUFNLDBCQUEwQixDQUFBO0FBYzFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRztJQUNuQixXQUFXLEVBQUUsK0RBQStEO0lBQzVFLFNBQVMsRUFBRSw2REFBNkQ7Q0FDekUsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZO0lBQzFELENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDO0lBQ1YsZ0RBQWdEO0lBQ2hELENBQUMsQ0FBQyxTQUFTLE9BQU8sQ0FBRSxLQUFxQixFQUFFLEVBQUUsTUFBTSxLQUEwQixFQUFFO1FBQzdFLE1BQU0sR0FBRyxNQUFNLElBQUksT0FBTyxDQUFBO1FBQzFCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssWUFBWSxFQUFFO1lBQ3pDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1lBQ3JCLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7Z0JBQ2hFLFdBQVcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO2dCQUN0QyxTQUFTLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtnQkFDcEMsV0FBVyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDeEMsQ0FBQyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUMsQ0FBQTtBQUVILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLDBFQUEwRSxDQUFBO0FBQzVHLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLHNGQUFzRixDQUFBO0FBQ3RILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLDBEQUEwRCxDQUFBO0FBRTVGLE1BQU0sVUFBVSxXQUFXLENBQUUsRUFBRSxPQUFPLEVBQXdCLEVBQUUsTUFBYztJQUM1RSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsaUJBQWlCLENBQUMsRUFBRTtRQUM5RCxNQUFNLENBQUMsSUFBSSxDQUNULGtCQUFrQixFQUNsQixPQUFPLEVBQ1AsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0tBQ3JCO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUUsV0FBaUMsRUFBRSxNQUFjO0lBQzFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUE7SUFFL0IsSUFDRSxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxRQUFRO1FBQ3RDLE9BQU8sWUFBWSxVQUFVLENBQUMsV0FBVztRQUN6QyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksQ0FBQyxFQUM3QztRQUNBLE1BQU0sQ0FBQyxJQUFJLENBQ1QsZ0JBQWdCLEVBQ2hCLE9BQU8sRUFDUCxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUE7S0FDbkI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBRSxXQUFpQyxFQUFFLE1BQWM7SUFDNUUsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUE7SUFDNUMsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsVUFBVSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7SUFFdEYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7UUFDekIsTUFBTSxDQUFDLElBQUksQ0FDVCxrQkFBa0IsRUFDbEIsVUFBVSxFQUNWLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtLQUM1QjtBQUNILENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBRSxPQUFvQixFQUFFLElBQStCLEVBQUUsT0FBZTtJQUN2RixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDeEYsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFFLE9BQWdCLEVBQUUsSUFBK0IsRUFBRSxPQUFlO0lBQ3pGLElBQUksTUFBTSxHQUFHLE9BQXNCLENBQUE7SUFFbkMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3pCLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDbkMsT0FBTyxJQUFJLENBQUE7U0FDWjtRQUVELE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7S0FDNUI7SUFFRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUM7QUFFRCxlQUFlO0lBQ2IsRUFBRSxFQUFFLFdBQVc7SUFDZixPQUFPO0NBQ1IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbi8qIGdsb2JhbCBwcm9jZXNzICovXG5pbXBvcnQgZG9tT2JqZWN0cyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9kb21PYmplY3RzJ1xuaW1wb3J0IHsgcGFyZW50Tm9kZSB9IGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL2RvbVV0aWxzJ1xuaW1wb3J0ICogYXMgaXMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvaXMnXG5pbXBvcnQgd2luIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL3dpbmRvdydcblxuZGVjbGFyZSBtb2R1bGUgJ0BpbnRlcmFjdGpzL2NvcmUvc2NvcGUnIHtcbiAgaW50ZXJmYWNlIFNjb3BlIHtcbiAgICBsb2dnZXI6IExvZ2dlclxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9nZ2VyIHtcbiAgd2FybjogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkXG4gIGVycm9yOiAoLi4uYXJnczogYW55W10pID0+IHZvaWRcbiAgbG9nOiAoLi4uYXJnczogYW55W10pID0+IHZvaWRcbn1cblxuZXhwb3J0IGNvbnN0IGxpbmtzID0ge1xuICB0b3VjaEFjdGlvbjogJ2h0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90b3VjaC1hY3Rpb24nLFxuICBib3hTaXppbmc6ICdodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm94LXNpemluZycsXG59XG5cbmV4cG9ydCBjb25zdCBpbnN0YWxsID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xuICA/ICgpID0+IHt9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICA6IGZ1bmN0aW9uIGluc3RhbGwgKHNjb3BlOiBJbnRlcmFjdC5TY29wZSwgeyBsb2dnZXIgfTogeyBsb2dnZXI/OiBMb2dnZXIgfSA9IHt9KSB7XG4gICAgbG9nZ2VyID0gbG9nZ2VyIHx8IGNvbnNvbGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgc2NvcGUubG9nZ2VyID0gbG9nZ2VyXG4gICAgICBzY29wZS5pbnRlcmFjdGlvbnMuc2lnbmFscy5vbignYWN0aW9uLXN0YXJ0JywgKHsgaW50ZXJhY3Rpb24gfSkgPT4ge1xuICAgICAgICB0b3VjaEFjdGlvbihpbnRlcmFjdGlvbiwgc2NvcGUubG9nZ2VyKVxuICAgICAgICBib3hTaXppbmcoaW50ZXJhY3Rpb24sIHNjb3BlLmxvZ2dlcilcbiAgICAgICAgbm9MaXN0ZW5lcnMoaW50ZXJhY3Rpb24sIHNjb3BlLmxvZ2dlcilcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbmV4cG9ydCBjb25zdCB0b3VjaEFjdGlvbk1lc3NhZ2UgPSAnW2ludGVyYWN0LmpzXSBDb25zaWRlciBhZGRpbmcgQ1NTIFwidG91Y2gtYWN0aW9uOiBub25lXCIgdG8gdGhpcyBlbGVtZW50XFxuJ1xuZXhwb3J0IGNvbnN0IGJveFNpemluZ01lc3NhZ2UgPSAnW2ludGVyYWN0LmpzXSBDb25zaWRlciBhZGRpbmcgQ1NTIFwiYm94LXNpemluZzogYm9yZGVyLWJveFwiIHRvIHRoaXMgcmVzaXphYmxlIGVsZW1lbnQnXG5leHBvcnQgY29uc3Qgbm9MaXN0ZW5lcnNNZXNzYWdlID0gJ1tpbnRlcmFjdC5qc10gVGhlcmUgYXJlIG5vIGxpc3RlbmVycyBzZXQgZm9yIHRoaXMgYWN0aW9uJ1xuXG5leHBvcnQgZnVuY3Rpb24gdG91Y2hBY3Rpb24gKHsgZWxlbWVudCB9OiBJbnRlcmFjdC5JbnRlcmFjdGlvbiwgbG9nZ2VyOiBMb2dnZXIpIHtcbiAgaWYgKCFwYXJlbnRIYXNTdHlsZShlbGVtZW50LCAndG91Y2hBY3Rpb24nLCAvcGFuLXxwaW5jaHxub25lLykpIHtcbiAgICBsb2dnZXIud2FybihcbiAgICAgIHRvdWNoQWN0aW9uTWVzc2FnZSxcbiAgICAgIGVsZW1lbnQsXG4gICAgICBsaW5rcy50b3VjaEFjdGlvbilcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYm94U2l6aW5nIChpbnRlcmFjdGlvbjogSW50ZXJhY3QuSW50ZXJhY3Rpb24sIGxvZ2dlcjogTG9nZ2VyKSB7XG4gIGNvbnN0IHsgZWxlbWVudCB9ID0gaW50ZXJhY3Rpb25cblxuICBpZiAoXG4gICAgaW50ZXJhY3Rpb24ucHJlcGFyZWQubmFtZSA9PT0gJ3Jlc2l6ZScgJiZcbiAgICBlbGVtZW50IGluc3RhbmNlb2YgZG9tT2JqZWN0cy5IVE1MRWxlbWVudCAmJlxuICAgICFoYXNTdHlsZShlbGVtZW50LCAnYm94U2l6aW5nJywgL2JvcmRlci1ib3gvKVxuICApIHtcbiAgICBsb2dnZXIud2FybihcbiAgICAgIGJveFNpemluZ01lc3NhZ2UsXG4gICAgICBlbGVtZW50LFxuICAgICAgbGlua3MuYm94U2l6aW5nKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub0xpc3RlbmVycyAoaW50ZXJhY3Rpb246IEludGVyYWN0LkludGVyYWN0aW9uLCBsb2dnZXI6IExvZ2dlcikge1xuICBjb25zdCBhY3Rpb25OYW1lID0gaW50ZXJhY3Rpb24ucHJlcGFyZWQubmFtZVxuICBjb25zdCBtb3ZlTGlzdGVuZXJzID0gaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlLmV2ZW50cy50eXBlc1tgJHthY3Rpb25OYW1lfW1vdmVgXSB8fCBbXVxuXG4gIGlmICghbW92ZUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICBsb2dnZXIud2FybihcbiAgICAgIG5vTGlzdGVuZXJzTWVzc2FnZSxcbiAgICAgIGFjdGlvbk5hbWUsXG4gICAgICBpbnRlcmFjdGlvbi5pbnRlcmFjdGFibGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzU3R5bGUgKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBwcm9wOiBrZXlvZiBDU1NTdHlsZURlY2xhcmF0aW9uLCBzdHlsZVJlOiBSZWdFeHApIHtcbiAgcmV0dXJuIHN0eWxlUmUudGVzdChlbGVtZW50LnN0eWxlW3Byb3BdIHx8IHdpbi53aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtwcm9wXSlcbn1cblxuZnVuY3Rpb24gcGFyZW50SGFzU3R5bGUgKGVsZW1lbnQ6IEVsZW1lbnQsIHByb3A6IGtleW9mIENTU1N0eWxlRGVjbGFyYXRpb24sIHN0eWxlUmU6IFJlZ0V4cCkge1xuICBsZXQgcGFyZW50ID0gZWxlbWVudCBhcyBIVE1MRWxlbWVudFxuXG4gIHdoaWxlIChpcy5lbGVtZW50KHBhcmVudCkpIHtcbiAgICBpZiAoaGFzU3R5bGUocGFyZW50LCBwcm9wLCBzdHlsZVJlKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBwYXJlbnQgPSBwYXJlbnROb2RlKHBhcmVudClcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlkOiAnZGV2LXRvb2xzJyxcbiAgaW5zdGFsbCxcbn1cbiJdfQ==