import * as actions from '@interactjs/actions';
import autoScroll from '@interactjs/auto-scroll';
import * as autoStart from '@interactjs/auto-start';
import interactablePreventDefault from '@interactjs/core/interactablePreventDefault';
import devTools from '@interactjs/dev-tools';
import inertia from '@interactjs/inertia';
import * as modifiers from '@interactjs/modifiers';
import modifiersBase from '@interactjs/modifiers/base';
import * as pointerEvents from '@interactjs/pointer-events';
import reflow from '@interactjs/reflow';
import interact, { scope } from './interact';
export function init(window) {
    scope.init(window);
    interact.use(interactablePreventDefault);
    // inertia
    interact.use(inertia);
    // pointerEvents
    interact.use(pointerEvents);
    // autoStart, hold
    interact.use(autoStart);
    // drag and drop, resize, gesture
    interact.use(actions);
    // snap, resize, etc.
    interact.use(modifiersBase);
    // for backwrads compatibility
    for (const type in modifiers) {
        const { _defaults, _methods } = modifiers[type];
        _defaults._methods = _methods;
        scope.defaults.perAction[type] = _defaults;
    }
    // autoScroll
    interact.use(autoScroll);
    // reflow
    interact.use(reflow);
    // eslint-disable-next-line no-undef
    if (process.env.NODE_ENV !== 'production') {
        interact.use(devTools);
    }
    return interact;
}
// eslint-disable-next-line no-undef
interact.version = init.version = process.env.npm_package_version;
export default interact;
export { interact, actions, autoScroll, interactablePreventDefault, inertia, modifiersBase as modifiers, pointerEvents, reflow, };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLHFCQUFxQixDQUFBO0FBQzlDLE9BQU8sVUFBVSxNQUFNLHlCQUF5QixDQUFBO0FBQ2hELE9BQU8sS0FBSyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFDbkQsT0FBTywwQkFBMEIsTUFBTSw2Q0FBNkMsQ0FBQTtBQUNwRixPQUFPLFFBQVEsTUFBTSx1QkFBdUIsQ0FBQTtBQUM1QyxPQUFPLE9BQU8sTUFBTSxxQkFBcUIsQ0FBQTtBQUN6QyxPQUFPLEtBQUssU0FBUyxNQUFNLHVCQUF1QixDQUFBO0FBQ2xELE9BQU8sYUFBYSxNQUFNLDRCQUE0QixDQUFBO0FBQ3RELE9BQU8sS0FBSyxhQUFhLE1BQU0sNEJBQTRCLENBQUE7QUFDM0QsT0FBTyxNQUFNLE1BQU0sb0JBQW9CLENBQUE7QUFDdkMsT0FBTyxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFFNUMsTUFBTSxVQUFVLElBQUksQ0FBRSxNQUFjO0lBQ2xDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFFbEIsUUFBUSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO0lBRXhDLFVBQVU7SUFDVixRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRXJCLGdCQUFnQjtJQUNoQixRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBRTNCLGtCQUFrQjtJQUNsQixRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBRXZCLGlDQUFpQztJQUNqQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRXJCLHFCQUFxQjtJQUNyQixRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBRTNCLDhCQUE4QjtJQUM5QixLQUFLLE1BQU0sSUFBSSxJQUFJLFNBQVMsRUFBRTtRQUM1QixNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUUvQyxTQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUM3QixLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUE7S0FDM0M7SUFFRCxhQUFhO0lBQ2IsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUV4QixTQUFTO0lBQ1QsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUVwQixvQ0FBb0M7SUFDcEMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLEVBQUU7UUFDekMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtLQUN2QjtJQUVELE9BQU8sUUFBUSxDQUFBO0FBQ2pCLENBQUM7QUFFRCxvQ0FBb0M7QUFDcEMsUUFBUSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUE7QUFFakUsZUFBZSxRQUFRLENBQUE7QUFDdkIsT0FBTyxFQUNMLFFBQVEsRUFDUixPQUFPLEVBQ1AsVUFBVSxFQUNWLDBCQUEwQixFQUMxQixPQUFPLEVBQ1AsYUFBYSxJQUFJLFNBQVMsRUFDMUIsYUFBYSxFQUNiLE1BQU0sR0FDUCxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICdAaW50ZXJhY3Rqcy9hY3Rpb25zJ1xuaW1wb3J0IGF1dG9TY3JvbGwgZnJvbSAnQGludGVyYWN0anMvYXV0by1zY3JvbGwnXG5pbXBvcnQgKiBhcyBhdXRvU3RhcnQgZnJvbSAnQGludGVyYWN0anMvYXV0by1zdGFydCdcbmltcG9ydCBpbnRlcmFjdGFibGVQcmV2ZW50RGVmYXVsdCBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL2ludGVyYWN0YWJsZVByZXZlbnREZWZhdWx0J1xuaW1wb3J0IGRldlRvb2xzIGZyb20gJ0BpbnRlcmFjdGpzL2Rldi10b29scydcbmltcG9ydCBpbmVydGlhIGZyb20gJ0BpbnRlcmFjdGpzL2luZXJ0aWEnXG5pbXBvcnQgKiBhcyBtb2RpZmllcnMgZnJvbSAnQGludGVyYWN0anMvbW9kaWZpZXJzJ1xuaW1wb3J0IG1vZGlmaWVyc0Jhc2UgZnJvbSAnQGludGVyYWN0anMvbW9kaWZpZXJzL2Jhc2UnXG5pbXBvcnQgKiBhcyBwb2ludGVyRXZlbnRzIGZyb20gJ0BpbnRlcmFjdGpzL3BvaW50ZXItZXZlbnRzJ1xuaW1wb3J0IHJlZmxvdyBmcm9tICdAaW50ZXJhY3Rqcy9yZWZsb3cnXG5pbXBvcnQgaW50ZXJhY3QsIHsgc2NvcGUgfSBmcm9tICcuL2ludGVyYWN0J1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCAod2luZG93OiBXaW5kb3cpOiB0eXBlb2YgaW50ZXJhY3Qge1xuICBzY29wZS5pbml0KHdpbmRvdylcblxuICBpbnRlcmFjdC51c2UoaW50ZXJhY3RhYmxlUHJldmVudERlZmF1bHQpXG5cbiAgLy8gaW5lcnRpYVxuICBpbnRlcmFjdC51c2UoaW5lcnRpYSlcblxuICAvLyBwb2ludGVyRXZlbnRzXG4gIGludGVyYWN0LnVzZShwb2ludGVyRXZlbnRzKVxuXG4gIC8vIGF1dG9TdGFydCwgaG9sZFxuICBpbnRlcmFjdC51c2UoYXV0b1N0YXJ0KVxuXG4gIC8vIGRyYWcgYW5kIGRyb3AsIHJlc2l6ZSwgZ2VzdHVyZVxuICBpbnRlcmFjdC51c2UoYWN0aW9ucylcblxuICAvLyBzbmFwLCByZXNpemUsIGV0Yy5cbiAgaW50ZXJhY3QudXNlKG1vZGlmaWVyc0Jhc2UpXG5cbiAgLy8gZm9yIGJhY2t3cmFkcyBjb21wYXRpYmlsaXR5XG4gIGZvciAoY29uc3QgdHlwZSBpbiBtb2RpZmllcnMpIHtcbiAgICBjb25zdCB7IF9kZWZhdWx0cywgX21ldGhvZHMgfSA9IG1vZGlmaWVyc1t0eXBlXVxuXG4gICAgX2RlZmF1bHRzLl9tZXRob2RzID0gX21ldGhvZHNcbiAgICBzY29wZS5kZWZhdWx0cy5wZXJBY3Rpb25bdHlwZV0gPSBfZGVmYXVsdHNcbiAgfVxuXG4gIC8vIGF1dG9TY3JvbGxcbiAgaW50ZXJhY3QudXNlKGF1dG9TY3JvbGwpXG5cbiAgLy8gcmVmbG93XG4gIGludGVyYWN0LnVzZShyZWZsb3cpXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaW50ZXJhY3QudXNlKGRldlRvb2xzKVxuICB9XG5cbiAgcmV0dXJuIGludGVyYWN0XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuaW50ZXJhY3QudmVyc2lvbiA9IGluaXQudmVyc2lvbiA9IHByb2Nlc3MuZW52Lm5wbV9wYWNrYWdlX3ZlcnNpb25cblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJhY3RcbmV4cG9ydCB7XG4gIGludGVyYWN0LFxuICBhY3Rpb25zLFxuICBhdXRvU2Nyb2xsLFxuICBpbnRlcmFjdGFibGVQcmV2ZW50RGVmYXVsdCxcbiAgaW5lcnRpYSxcbiAgbW9kaWZpZXJzQmFzZSBhcyBtb2RpZmllcnMsXG4gIHBvaW50ZXJFdmVudHMsXG4gIHJlZmxvdyxcbn1cbiJdfQ==